* Authorization with Pundit

Scott Jacobsen

https://github.com/scottjacobsen/

* Authentication vs Authorization

Authentication -> You are who you say you are.
- User name/password
- Connect with Facebook, etc.

Authorization -> You are allowed to do something.
- You are authorized to create/delete/etc a record.

* A typical rails #update action

#+BEGIN_SRC ruby
def update
  @comment = Comment.find params[:id]
  if @comment.update comment_params
    redirect_to @comment, notice: "Success!"
  else
    render :edit
  end
end
#+END_SRC

Whats wrong with this method?

[[./bad-method.jpg]]

* ActiveRecord scopes to the rescue!

Use ActiveRecord scopes as an authorization mechanism.
#+BEGIN_SRC ruby
  def update
    # Scope the comments to the current user
    @comment = current_user.comments.find params[:id]
    if @comment.update comment_params
      redirect_to @comment, notice: "Success!"
    else
      render :edit
    end
  end
#+END_SRC

[[./no-droids.jpg]]

* Of course you wrote tests for this

#+BEGIN_SRC ruby
  test "update raises if current_user isn't owner" do
    #...
  end

  test "owner updates" do
    #...
  end
#+END_SRC

[[./tests.jpg]]

* Oops

Don't forget the view.
#+BEGIN_SRC haml
  - if current_user == @comment.user
    = link_to "Edit", edit_comment_path @comment
#+END_SRC

[[./oops1.jpg]]

* Victory?

The internet:

[[./scum.jpg]]

* The site needs moderators

#+BEGIN_SRC ruby
  def update
    # Moderators can edit all the things
    # otherwise scope to the user. Sigh...
    @comment = if current_user.moderator?
                 Comment.find params[:id]
               else
                 current_user.comments.find params[:id]
               end
    if @comment.update comment_params
      redirect_to @comment, notice: "Success!"
    else
      render :edit
    end
  end
#+END_SRC

[[./moderator.jpg]]

* Don't forget the tests

#+BEGIN_SRC ruby
  test "moderator updates" do
    #...
  end

  test "update raises if current_user isn't owner or moderator" do
    #...
  end

  test "owner updates" do
    #...
  end
#+END_SRC

[[./tests.jpg]]

* Oops

Don't forget the view.
#+BEGIN_SRC haml
  - if current_user.moderator? || current_user == @comment.user
    = link_to "Edit", edit_comment_path @comment
#+END_SRC

[[./oops1.jpg]]

* Victory?

- Authorization code is duplicated and scattered around views
  controllers
- An explosion of *slow* controller tests
- It is easy to forget to add authorization code in other actions
  (#destroy, #create, etc)

[[./victory.jpeg]]

* The path to victory

- Move authorization logic to one reusable place
- Handle authorization with a one liner in the controller actions
- Leverage Rails exception handling
- Make it difficult to forget adding authorization logic.
- Better tests

[[./path-to-victory.jpg]]

* One reusable place

- Create a PORO to encapsulate the authorization logic.
- In general - Create one policy object per model

#+BEGIN_SRC ruby
  # In app/policies/comment_policy.rb
  class CommentPolicy
    def initialize(current_user, comment)
      @user = current_user
      @comment = comment
    end

    def update?
      @user == comment.user || @user.moderator?
    end
    alias edit? update?

    def create?
      # TODO
    end
    alias new? create?

    def destroy?
      # TODO
    end

    def show?
      # TODO
    end

    def index?
      # TODO
    end
  end
#+END_SRC

* Add a one liner to the controller

#+BEGIN_SRC ruby
  def update
    @comment = Comment.find params[:id]
    CommentPolicy.new(current_user, @comment).update? || raise(UnauthorizedError)
    if @comment.update comment_params
      redirect_to @comment, notice: "Success!"
    else
      render :edit
    end
  end
#+END_SRC

* Reuse the logic in the view

#+BEGIN_SRC haml
- if CommentPolicy.new(current_user, @comment).update?
  = link_to "Edit", edit_comment_path(@comment)
#+END_SRC

* Better tests

Unit test authorization logic in isolation, not through the
controller.

Unlike a controller test this test is very fast - it does not touch
the database, render views, etc.

#+BEGIN_SRC ruby
  class CommentPolicyTest < ActiveSupport::TestCase
    test "#update? allows moderators" do
      moderator = User.new moderator: true
      comment = Comment.new
      assert CommentPolicy.new(moderator, comment).update?
    end

    test "#update? allows owner" do
      user = User.new
      comment = Comment.new user: user
      assert CommentPolicy.new(user, comment).update?
    end

    test "#update? does not allow other users" do
      refute CommentPolicy.new(User.new, Comment.new).update?
    end
  end
#+END_SRC

[[./fast.jpg]]

* Better tests

The controller test does not need to test the authorization logic -
only that authorization is done.

If the authorization logic changes there are no changes to the
controller test.

#+BEGIN_SRC ruby
  class CommentsControllerTest < ActionController::TestCase
    test "#update" do
      CommentPolicy.any_instance.expects(:update?).returns true
      #...
    end

    test "#update raises when unauthorized" do
      CommentPolicy.any_instance.expects(:update?).returns false

      assert_raise UnauthorizedError do
        #...
      end
    end
  end
#+END_SRC

* Victory?

We are close.

[[./near-victory.jpg]]

* What about Pundit?

Pundit simply provides a few helper methods that make it easy to use
policies in controllers and views.

[[./pundit-helper.jpg]]

* Pundit in controllers

Mix Pundit into your application controller

#+BEGIN_SRC ruby
  class ApplicationController < ActionController::Base
    include Pundit
    #...
  end
#+END_SRC

* Pundit in controllers: #authorize

Pundit provides the #authorize helper method to authorize actions.

#authorize figures out which policy class to use, and which policy
method to call.

#authorize gets the user (by default) by calling current_user.

If authorization fails Pundit::NotAuthorizedError is raised.

#+BEGIN_SRC ruby
def update
  @comment = Comment.find params[:id]
  authorize @comment
  if @comment.update comment_params
    redirect_to @comment, notice: "Success!"
  else
    render :edit
  end
end
#+END_SRC

* Pundit in controllers: ::verify_authorized

The ::verify_authorized class method will cause actions to raise
Pundit::AuthorizationNotPerformedError if #authorize is not called in
a controller action.

#+BEGIN_SRC ruby
  class CommentsController < ApplicationController
    after_action :verify_authorized

    # Update properly authorizes
    def update
      @comment = Comment.find params[:id]
      authorize @comment
      if @comment.update comment_params
        redirect_to @comment, notice: "Success!"
      else
        render :edit
      end
    end

    # Raises Pundit::AuthorizationNotPerformedError, but the object is
    # still destroyed!
    def destroy
      @comment = Comment.find params[:id]
      @comment.destroy
    end

    # Pundit#skip_authorization to skip authorization
    def edit
      @comment = Comment.find_by_id params[:id]
      if @comment
        authorize @comment
      else
        skip_authorization
        redirect_to :index
      end
    end
  end
#+END_SRC

* Pundit in controllers: Handling exceptions

Use Rail's #rescue_from to handle pundit exceptions.

#+BEGIN_SRC ruby
  class ApplicationController < ActionController::Base
    include Pundit

    rescue_from Pundit::NotAuthorizedError do |_|
      raise ActionController::RoutingError, "Not Authorized"
    end
  end
#+END_SRC

[[./handle-exceptions.jpg]]

* Pundit in views

Use Pundit's #policy method to conditionally render view elements.

#+BEGIN_SRC haml
  - if policy(@comment).edit?
    = link_to "Edit", edit_comment_path(@comment)
#+END_SRC

* Pundit with strong parameters

Parameters used by an action often vary based on authorization logic.

Simply add a #permitted_attributes method to the policy class.

#+BEGIN_SRC ruby
  class CommentPolicy
    def permitted_attributes
      if @user.moderator?
        [:comment_text, :featured]
      else
        [:comment_text]
      end
    end
  end
#+END_SRC

Use the #permitted_attributes helper in the controller

#+BEGIN_SRC ruby
  def update
    @comment = Comment.find params[:id]
    authorize @comment
    if @comment.update permitted_attributes(@comment)
      redirect_to @comment, notice: "Success!"
    else
      render :edit
    end
  end
#+END_SRC

* Pundit and scopes

Pundit has helpers that allow you scope active record queries to
record the user has permission to view.

#+BEGIN_SRC ruby
  class CommentsController
    def index
      @comments = policy_scope(Comment)
    end
  end
#+END_SRC

[[./scoping.jpg]]

* Victory?

[[./victory.jpg]]

https://github.com/elabs/pundit
